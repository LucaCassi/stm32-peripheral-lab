
ADC_singleChannelConversion_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002810  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800295c  0800295c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800295c  0800295c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800295c  0800295c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002960  08002960  00012960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08002970  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002970  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099d5  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf1  00000000  00000000  00029a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0002b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000871  00000000  00000000  0002c130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016e0a  00000000  00000000  0002c9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c250  00000000  00000000  000437ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008704e  00000000  00000000  0004f9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cec  00000000  00000000  000d6a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ae  00000000  00000000  000d9738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002904 	.word	0x08002904

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002904 	.word	0x08002904

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fa70 	bl	8000634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f820 	bl	8000198 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f910 	bl	800037c <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f878 	bl	8000250 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000160:	f000 f8b4 	bl	80002cc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   // Luca: start PWM generation on channel 1 of tim2
 8000164:	2100      	movs	r1, #0
 8000166:	4809      	ldr	r0, [pc, #36]	; (800018c <main+0x40>)
 8000168:	f001 ffda 	bl	8002120 <HAL_TIM_PWM_Start>
  HAL_ADCEx_Calibration_Start(&hadc1);        // Luca: calibrate the adc as soon as possible for better accuracy
 800016c:	4808      	ldr	r0, [pc, #32]	; (8000190 <main+0x44>)
 800016e:	f000 fedd 	bl	8000f2c <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_IT(&hadc1);               // Luca: Start ADC Conversion (this is a trigger by software!, but now with the _IT name!)
 8000172:	4807      	ldr	r0, [pc, #28]	; (8000190 <main+0x44>)
 8000174:	f000 fbbc 	bl	80008f0 <HAL_ADC_Start_IT>
	  TIM2->CCR1  = (AD_RES<<4);             // Luca: if you don't know the timer handler struct, you can use HAL: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, (AD_RES<<4));
 8000178:	4b06      	ldr	r3, [pc, #24]	; (8000194 <main+0x48>)
 800017a:	881b      	ldrh	r3, [r3, #0]
 800017c:	011a      	lsls	r2, r3, #4
 800017e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000182:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(1);                          // Luca:  1ms of wait
 8000184:	2001      	movs	r0, #1
 8000186:	f000 fab7 	bl	80006f8 <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc1);               // Luca: Start ADC Conversion (this is a trigger by software!, but now with the _IT name!)
 800018a:	e7f2      	b.n	8000172 <main+0x26>
 800018c:	20000058 	.word	0x20000058
 8000190:	20000028 	.word	0x20000028
 8000194:	200000a0 	.word	0x200000a0

08000198 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b094      	sub	sp, #80	; 0x50
 800019c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001a2:	2228      	movs	r2, #40	; 0x28
 80001a4:	2100      	movs	r1, #0
 80001a6:	4618      	mov	r0, r3
 80001a8:	f002 fb80 	bl	80028ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ac:	f107 0314 	add.w	r3, r7, #20
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
 80001b4:	605a      	str	r2, [r3, #4]
 80001b6:	609a      	str	r2, [r3, #8]
 80001b8:	60da      	str	r2, [r3, #12]
 80001ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001c8:	2301      	movs	r3, #1
 80001ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d6:	2301      	movs	r3, #1
 80001d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001da:	2302      	movs	r3, #2
 80001dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ee:	4618      	mov	r0, r3
 80001f0:	f001 f9de 	bl	80015b0 <HAL_RCC_OscConfig>
 80001f4:	4603      	mov	r3, r0
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d001      	beq.n	80001fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001fa:	f000 f8f5 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fe:	230f      	movs	r3, #15
 8000200:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000202:	2302      	movs	r3, #2
 8000204:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000214:	f107 0314 	add.w	r3, r7, #20
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f001 fc4a 	bl	8001ab4 <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000226:	f000 f8df 	bl	80003e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800022a:	2302      	movs	r3, #2
 800022c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800022e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000232:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fdb6 	bl	8001da8 <HAL_RCCEx_PeriphCLKConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000242:	f000 f8d1 	bl	80003e8 <Error_Handler>
  }
}
 8000246:	bf00      	nop
 8000248:	3750      	adds	r7, #80	; 0x50
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
 800025e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <MX_ADC1_Init+0x74>)
 8000262:	4a19      	ldr	r2, [pc, #100]	; (80002c8 <MX_ADC1_Init+0x78>)
 8000264:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000266:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <MX_ADC1_Init+0x74>)
 8000268:	2200      	movs	r2, #0
 800026a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800026c:	4b15      	ldr	r3, [pc, #84]	; (80002c4 <MX_ADC1_Init+0x74>)
 800026e:	2200      	movs	r2, #0
 8000270:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000272:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <MX_ADC1_Init+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000278:	4b12      	ldr	r3, [pc, #72]	; (80002c4 <MX_ADC1_Init+0x74>)
 800027a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800027e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000280:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <MX_ADC1_Init+0x74>)
 8000282:	2200      	movs	r2, #0
 8000284:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000286:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <MX_ADC1_Init+0x74>)
 8000288:	2201      	movs	r2, #1
 800028a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800028c:	480d      	ldr	r0, [pc, #52]	; (80002c4 <MX_ADC1_Init+0x74>)
 800028e:	f000 fa57 	bl	8000740 <HAL_ADC_Init>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000298:	f000 f8a6 	bl	80003e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800029c:	2307      	movs	r3, #7
 800029e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002a0:	2301      	movs	r3, #1
 80002a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002a4:	2300      	movs	r3, #0
 80002a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	4619      	mov	r1, r3
 80002ac:	4805      	ldr	r0, [pc, #20]	; (80002c4 <MX_ADC1_Init+0x74>)
 80002ae:	f000 fca9 	bl	8000c04 <HAL_ADC_ConfigChannel>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002b8:	f000 f896 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002bc:	bf00      	nop
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	20000028 	.word	0x20000028
 80002c8:	40012400 	.word	0x40012400

080002cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b08a      	sub	sp, #40	; 0x28
 80002d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002d2:	f107 0320 	add.w	r3, r7, #32
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002dc:	1d3b      	adds	r3, r7, #4
 80002de:	2200      	movs	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
 80002e2:	605a      	str	r2, [r3, #4]
 80002e4:	609a      	str	r2, [r3, #8]
 80002e6:	60da      	str	r2, [r3, #12]
 80002e8:	611a      	str	r2, [r3, #16]
 80002ea:	615a      	str	r2, [r3, #20]
 80002ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002ee:	4b22      	ldr	r3, [pc, #136]	; (8000378 <MX_TIM2_Init+0xac>)
 80002f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002f6:	4b20      	ldr	r3, [pc, #128]	; (8000378 <MX_TIM2_Init+0xac>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <MX_TIM2_Init+0xac>)
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000302:	4b1d      	ldr	r3, [pc, #116]	; (8000378 <MX_TIM2_Init+0xac>)
 8000304:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000308:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800030a:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <MX_TIM2_Init+0xac>)
 800030c:	2200      	movs	r2, #0
 800030e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000310:	4b19      	ldr	r3, [pc, #100]	; (8000378 <MX_TIM2_Init+0xac>)
 8000312:	2280      	movs	r2, #128	; 0x80
 8000314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000316:	4818      	ldr	r0, [pc, #96]	; (8000378 <MX_TIM2_Init+0xac>)
 8000318:	f001 feb2 	bl	8002080 <HAL_TIM_PWM_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000322:	f000 f861 	bl	80003e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000326:	2300      	movs	r3, #0
 8000328:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800032a:	2300      	movs	r3, #0
 800032c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800032e:	f107 0320 	add.w	r3, r7, #32
 8000332:	4619      	mov	r1, r3
 8000334:	4810      	ldr	r0, [pc, #64]	; (8000378 <MX_TIM2_Init+0xac>)
 8000336:	f002 fa61 	bl	80027fc <HAL_TIMEx_MasterConfigSynchronization>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000340:	f000 f852 	bl	80003e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000344:	2360      	movs	r3, #96	; 0x60
 8000346:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	4619      	mov	r1, r3
 800035a:	4807      	ldr	r0, [pc, #28]	; (8000378 <MX_TIM2_Init+0xac>)
 800035c:	f001 ff7c 	bl	8002258 <HAL_TIM_PWM_ConfigChannel>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000366:	f000 f83f 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800036a:	4803      	ldr	r0, [pc, #12]	; (8000378 <MX_TIM2_Init+0xac>)
 800036c:	f000 f8d4 	bl	8000518 <HAL_TIM_MspPostInit>

}
 8000370:	bf00      	nop
 8000372:	3728      	adds	r7, #40	; 0x28
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	20000058 	.word	0x20000058

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000382:	4b0e      	ldr	r3, [pc, #56]	; (80003bc <MX_GPIO_Init+0x40>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a0d      	ldr	r2, [pc, #52]	; (80003bc <MX_GPIO_Init+0x40>)
 8000388:	f043 0320 	orr.w	r3, r3, #32
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <MX_GPIO_Init+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0320 	and.w	r3, r3, #32
 8000396:	607b      	str	r3, [r7, #4]
 8000398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800039a:	4b08      	ldr	r3, [pc, #32]	; (80003bc <MX_GPIO_Init+0x40>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <MX_GPIO_Init+0x40>)
 80003a0:	f043 0304 	orr.w	r3, r3, #4
 80003a4:	6193      	str	r3, [r2, #24]
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <MX_GPIO_Init+0x40>)
 80003a8:	699b      	ldr	r3, [r3, #24]
 80003aa:	f003 0304 	and.w	r3, r3, #4
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	40021000 	.word	0x40021000

080003c0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */
// Luca: you need to redefine HAL_ADC_ConvCpltCallback() when your code need it, according to documentation (CubeMX will regenerate all the
//       original HAL files) the following function will be called by ADCx_IRQHandler(), which is triggered once the conversion of
//       HAL_ADC_Start_IT(hadc1) (which by the way does not interrupt immediately the flow of the code) is completed;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	AD_RES = HAL_ADC_GetValue(&hadc1);
 80003c8:	4805      	ldr	r0, [pc, #20]	; (80003e0 <HAL_ADC_ConvCpltCallback+0x20>)
 80003ca:	f000 fb47 	bl	8000a5c <HAL_ADC_GetValue>
 80003ce:	4603      	mov	r3, r0
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <HAL_ADC_ConvCpltCallback+0x24>)
 80003d4:	801a      	strh	r2, [r3, #0]
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000028 	.word	0x20000028
 80003e4:	200000a0 	.word	0x200000a0

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <Error_Handler+0x8>
	...

080003f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b15      	ldr	r3, [pc, #84]	; (8000450 <HAL_MspInit+0x5c>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a14      	ldr	r2, [pc, #80]	; (8000450 <HAL_MspInit+0x5c>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <HAL_MspInit+0x5c>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <HAL_MspInit+0x5c>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a0e      	ldr	r2, [pc, #56]	; (8000450 <HAL_MspInit+0x5c>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0c      	ldr	r3, [pc, #48]	; (8000450 <HAL_MspInit+0x5c>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800042a:	4b0a      	ldr	r3, [pc, #40]	; (8000454 <HAL_MspInit+0x60>)
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	60fb      	str	r3, [r7, #12]
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	4a04      	ldr	r2, [pc, #16]	; (8000454 <HAL_MspInit+0x60>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000446:	bf00      	nop
 8000448:	3714      	adds	r7, #20
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000
 8000454:	40010000 	.word	0x40010000

08000458 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a18      	ldr	r2, [pc, #96]	; (80004d4 <HAL_ADC_MspInit+0x7c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d129      	bne.n	80004cc <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000478:	4b17      	ldr	r3, [pc, #92]	; (80004d8 <HAL_ADC_MspInit+0x80>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a16      	ldr	r2, [pc, #88]	; (80004d8 <HAL_ADC_MspInit+0x80>)
 800047e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <HAL_ADC_MspInit+0x80>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <HAL_ADC_MspInit+0x80>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a10      	ldr	r2, [pc, #64]	; (80004d8 <HAL_ADC_MspInit+0x80>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b0e      	ldr	r3, [pc, #56]	; (80004d8 <HAL_ADC_MspInit+0x80>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004a8:	2380      	movs	r3, #128	; 0x80
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ac:	2303      	movs	r3, #3
 80004ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4809      	ldr	r0, [pc, #36]	; (80004dc <HAL_ADC_MspInit+0x84>)
 80004b8:	f000 fefe 	bl	80012b8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2100      	movs	r1, #0
 80004c0:	2012      	movs	r0, #18
 80004c2:	f000 fec2 	bl	800124a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80004c6:	2012      	movs	r0, #18
 80004c8:	f000 fedb 	bl	8001282 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80004cc:	bf00      	nop
 80004ce:	3720      	adds	r7, #32
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40012400 	.word	0x40012400
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010800 	.word	0x40010800

080004e0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004f0:	d10b      	bne.n	800050a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004f2:	4b08      	ldr	r3, [pc, #32]	; (8000514 <HAL_TIM_PWM_MspInit+0x34>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a07      	ldr	r2, [pc, #28]	; (8000514 <HAL_TIM_PWM_MspInit+0x34>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <HAL_TIM_PWM_MspInit+0x34>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000

08000518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b088      	sub	sp, #32
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	f107 0310 	add.w	r3, r7, #16
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000536:	d117      	bne.n	8000568 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <HAL_TIM_MspPostInit+0x58>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a0c      	ldr	r2, [pc, #48]	; (8000570 <HAL_TIM_MspPostInit+0x58>)
 800053e:	f043 0304 	orr.w	r3, r3, #4
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_TIM_MspPostInit+0x58>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0304 	and.w	r3, r3, #4
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000550:	2301      	movs	r3, #1
 8000552:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000554:	2302      	movs	r3, #2
 8000556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2302      	movs	r3, #2
 800055a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	4804      	ldr	r0, [pc, #16]	; (8000574 <HAL_TIM_MspPostInit+0x5c>)
 8000564:	f000 fea8 	bl	80012b8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800

08000578 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800057c:	e7fe      	b.n	800057c <NMI_Handler+0x4>

0800057e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000582:	e7fe      	b.n	8000582 <HardFault_Handler+0x4>

08000584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000588:	e7fe      	b.n	8000588 <MemManage_Handler+0x4>

0800058a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800058a:	b480      	push	{r7}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800058e:	e7fe      	b.n	800058e <BusFault_Handler+0x4>

08000590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000594:	e7fe      	b.n	8000594 <UsageFault_Handler+0x4>

08000596 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000596:	b480      	push	{r7}
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr

080005a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005b2:	bf00      	nop
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bc80      	pop	{r7}
 80005b8:	4770      	bx	lr

080005ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005be:	f000 f87f 	bl	80006c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <ADC1_2_IRQHandler+0x10>)
 80005ce:	f000 fa51 	bl	8000a74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028

080005dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005e8:	f7ff fff8 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ee:	490c      	ldr	r1, [pc, #48]	; (8000620 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005f0:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f4:	e002      	b.n	80005fc <LoopCopyDataInit>

080005f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005fa:	3304      	adds	r3, #4

080005fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000600:	d3f9      	bcc.n	80005f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000602:	4a09      	ldr	r2, [pc, #36]	; (8000628 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000604:	4c09      	ldr	r4, [pc, #36]	; (800062c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000608:	e001      	b.n	800060e <LoopFillZerobss>

0800060a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800060a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800060c:	3204      	adds	r2, #4

0800060e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000610:	d3fb      	bcc.n	800060a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000612:	f002 f953 	bl	80028bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fd99 	bl	800014c <main>
  bx lr
 800061a:	4770      	bx	lr
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000624:	08002964 	.word	0x08002964
  ldr r2, =_sbss
 8000628:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800062c:	200000a8 	.word	0x200000a8

08000630 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <CAN1_RX1_IRQHandler>
	...

08000634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_Init+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <HAL_Init+0x28>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 fdf5 	bl	8001234 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064a:	200f      	movs	r0, #15
 800064c:	f000 f808 	bl	8000660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000650:	f7ff fed0 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <HAL_InitTick+0x54>)
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_InitTick+0x58>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4619      	mov	r1, r3
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	fbb3 f3f1 	udiv	r3, r3, r1
 800067a:	fbb2 f3f3 	udiv	r3, r2, r3
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fe0d 	bl	800129e <HAL_SYSTICK_Config>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e00e      	b.n	80006ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2b0f      	cmp	r3, #15
 8000692:	d80a      	bhi.n	80006aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000694:	2200      	movs	r2, #0
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	f04f 30ff 	mov.w	r0, #4294967295
 800069c:	f000 fdd5 	bl	800124a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006a0:	4a06      	ldr	r2, [pc, #24]	; (80006bc <HAL_InitTick+0x5c>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006a6:	2300      	movs	r3, #0
 80006a8:	e000      	b.n	80006ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006aa:	2301      	movs	r3, #1
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000008 	.word	0x20000008
 80006bc:	20000004 	.word	0x20000004

080006c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_IncTick+0x1c>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <HAL_IncTick+0x20>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4413      	add	r3, r2
 80006d0:	4a03      	ldr	r2, [pc, #12]	; (80006e0 <HAL_IncTick+0x20>)
 80006d2:	6013      	str	r3, [r2, #0]
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000008 	.word	0x20000008
 80006e0:	200000a4 	.word	0x200000a4

080006e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  return uwTick;
 80006e8:	4b02      	ldr	r3, [pc, #8]	; (80006f4 <HAL_GetTick+0x10>)
 80006ea:	681b      	ldr	r3, [r3, #0]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	200000a4 	.word	0x200000a4

080006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000700:	f7ff fff0 	bl	80006e4 <HAL_GetTick>
 8000704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000710:	d005      	beq.n	800071e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <HAL_Delay+0x44>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4413      	add	r3, r2
 800071c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071e:	bf00      	nop
 8000720:	f7ff ffe0 	bl	80006e4 <HAL_GetTick>
 8000724:	4602      	mov	r2, r0
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	429a      	cmp	r2, r3
 800072e:	d8f7      	bhi.n	8000720 <HAL_Delay+0x28>
  {
  }
}
 8000730:	bf00      	nop
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000008 	.word	0x20000008

08000740 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000748:	2300      	movs	r3, #0
 800074a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d101      	bne.n	8000762 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800075e:	2301      	movs	r3, #1
 8000760:	e0be      	b.n	80008e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800076c:	2b00      	cmp	r3, #0
 800076e:	d109      	bne.n	8000784 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2200      	movs	r2, #0
 8000774:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2200      	movs	r2, #0
 800077a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fe6a 	bl	8000458 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 fb8f 	bl	8000ea8 <ADC_ConversionStop_Disable>
 800078a:	4603      	mov	r3, r0
 800078c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	2b00      	cmp	r3, #0
 8000798:	f040 8099 	bne.w	80008ce <HAL_ADC_Init+0x18e>
 800079c:	7dfb      	ldrb	r3, [r7, #23]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f040 8095 	bne.w	80008ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007ac:	f023 0302 	bic.w	r3, r3, #2
 80007b0:	f043 0202 	orr.w	r2, r3, #2
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7b1b      	ldrb	r3, [r3, #12]
 80007c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007d8:	d003      	beq.n	80007e2 <HAL_ADC_Init+0xa2>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d102      	bne.n	80007e8 <HAL_ADC_Init+0xa8>
 80007e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007e6:	e000      	b.n	80007ea <HAL_ADC_Init+0xaa>
 80007e8:	2300      	movs	r3, #0
 80007ea:	693a      	ldr	r2, [r7, #16]
 80007ec:	4313      	orrs	r3, r2
 80007ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	7d1b      	ldrb	r3, [r3, #20]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d119      	bne.n	800082c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	7b1b      	ldrb	r3, [r3, #12]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d109      	bne.n	8000814 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	3b01      	subs	r3, #1
 8000806:	035a      	lsls	r2, r3, #13
 8000808:	693b      	ldr	r3, [r7, #16]
 800080a:	4313      	orrs	r3, r2
 800080c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000810:	613b      	str	r3, [r7, #16]
 8000812:	e00b      	b.n	800082c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000818:	f043 0220 	orr.w	r2, r3, #32
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000824:	f043 0201 	orr.w	r2, r3, #1
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	430a      	orrs	r2, r1
 800083e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	689a      	ldr	r2, [r3, #8]
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <HAL_ADC_Init+0x1a8>)
 8000848:	4013      	ands	r3, r2
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	6812      	ldr	r2, [r2, #0]
 800084e:	68b9      	ldr	r1, [r7, #8]
 8000850:	430b      	orrs	r3, r1
 8000852:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800085c:	d003      	beq.n	8000866 <HAL_ADC_Init+0x126>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	689b      	ldr	r3, [r3, #8]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d104      	bne.n	8000870 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	691b      	ldr	r3, [r3, #16]
 800086a:	3b01      	subs	r3, #1
 800086c:	051b      	lsls	r3, r3, #20
 800086e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000876:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	430a      	orrs	r2, r1
 8000882:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_ADC_Init+0x1ac>)
 800088c:	4013      	ands	r3, r2
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	429a      	cmp	r2, r3
 8000892:	d10b      	bne.n	80008ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800089e:	f023 0303 	bic.w	r3, r3, #3
 80008a2:	f043 0201 	orr.w	r2, r3, #1
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008aa:	e018      	b.n	80008de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b0:	f023 0312 	bic.w	r3, r3, #18
 80008b4:	f043 0210 	orr.w	r2, r3, #16
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c0:	f043 0201 	orr.w	r2, r3, #1
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008c8:	2301      	movs	r3, #1
 80008ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008cc:	e007      	b.n	80008de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d2:	f043 0210 	orr.w	r2, r3, #16
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008de:	7dfb      	ldrb	r3, [r7, #23]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	ffe1f7fd 	.word	0xffe1f7fd
 80008ec:	ff1f0efe 	.word	0xff1f0efe

080008f0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000902:	2b01      	cmp	r3, #1
 8000904:	d101      	bne.n	800090a <HAL_ADC_Start_IT+0x1a>
 8000906:	2302      	movs	r3, #2
 8000908:	e0a0      	b.n	8000a4c <HAL_ADC_Start_IT+0x15c>
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2201      	movs	r2, #1
 800090e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f000 fa6e 	bl	8000df4 <ADC_Enable>
 8000918:	4603      	mov	r3, r0
 800091a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f040 808f 	bne.w	8000a42 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000928:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800092c:	f023 0301 	bic.w	r3, r3, #1
 8000930:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a45      	ldr	r2, [pc, #276]	; (8000a54 <HAL_ADC_Start_IT+0x164>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d105      	bne.n	800094e <HAL_ADC_Start_IT+0x5e>
 8000942:	4b45      	ldr	r3, [pc, #276]	; (8000a58 <HAL_ADC_Start_IT+0x168>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800094a:	2b00      	cmp	r3, #0
 800094c:	d115      	bne.n	800097a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000952:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000964:	2b00      	cmp	r3, #0
 8000966:	d026      	beq.n	80009b6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800096c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000970:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000978:	e01d      	b.n	80009b6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a33      	ldr	r2, [pc, #204]	; (8000a58 <HAL_ADC_Start_IT+0x168>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d004      	beq.n	800099a <HAL_ADC_Start_IT+0xaa>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a2f      	ldr	r2, [pc, #188]	; (8000a54 <HAL_ADC_Start_IT+0x164>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d10d      	bne.n	80009b6 <HAL_ADC_Start_IT+0xc6>
 800099a:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <HAL_ADC_Start_IT+0x168>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d007      	beq.n	80009b6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80009ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d006      	beq.n	80009d0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c6:	f023 0206 	bic.w	r2, r3, #6
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ce:	e002      	b.n	80009d6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f06f 0202 	mvn.w	r2, #2
 80009e6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f042 0220 	orr.w	r2, r2, #32
 80009f6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000a02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000a06:	d113      	bne.n	8000a30 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a0c:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <HAL_ADC_Start_IT+0x164>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d105      	bne.n	8000a1e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_ADC_Start_IT+0x168>)
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d108      	bne.n	8000a30 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	689a      	ldr	r2, [r3, #8]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	e00c      	b.n	8000a4a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	e003      	b.n	8000a4a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2200      	movs	r2, #0
 8000a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40012800 	.word	0x40012800
 8000a58:	40012400 	.word	0x40012400

08000a5c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	f003 0320 	and.w	r3, r3, #32
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d03e      	beq.n	8000b14 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d039      	beq.n	8000b14 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa4:	f003 0310 	and.w	r3, r3, #16
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ac2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ac6:	d11d      	bne.n	8000b04 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d119      	bne.n	8000b04 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f022 0220 	bic.w	r2, r2, #32
 8000ade:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ae4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d105      	bne.n	8000b04 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000afc:	f043 0201 	orr.w	r2, r3, #1
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff fc5b 	bl	80003c0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f06f 0212 	mvn.w	r2, #18
 8000b12:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d04d      	beq.n	8000bba <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d048      	beq.n	8000bba <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	f003 0310 	and.w	r3, r3, #16
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d105      	bne.n	8000b40 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b38:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000b4a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000b4e:	d012      	beq.n	8000b76 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d125      	bne.n	8000baa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b68:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b6c:	d11d      	bne.n	8000baa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d119      	bne.n	8000baa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b84:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d105      	bne.n	8000baa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	f043 0201 	orr.w	r2, r3, #1
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 fa6c 	bl	8001088 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f06f 020c 	mvn.w	r2, #12
 8000bb8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d012      	beq.n	8000bea <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d00d      	beq.n	8000bea <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 f809 	bl	8000bf2 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f06f 0201 	mvn.w	r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	b083      	sub	sp, #12
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d101      	bne.n	8000c24 <HAL_ADC_ConfigChannel+0x20>
 8000c20:	2302      	movs	r3, #2
 8000c22:	e0dc      	b.n	8000dde <HAL_ADC_ConfigChannel+0x1da>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2201      	movs	r2, #1
 8000c28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b06      	cmp	r3, #6
 8000c32:	d81c      	bhi.n	8000c6e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685a      	ldr	r2, [r3, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	3b05      	subs	r3, #5
 8000c46:	221f      	movs	r2, #31
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4019      	ands	r1, r3
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	4413      	add	r3, r2
 8000c5e:	3b05      	subs	r3, #5
 8000c60:	fa00 f203 	lsl.w	r2, r0, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c6c:	e03c      	b.n	8000ce8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2b0c      	cmp	r3, #12
 8000c74:	d81c      	bhi.n	8000cb0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	4613      	mov	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	4413      	add	r3, r2
 8000c86:	3b23      	subs	r3, #35	; 0x23
 8000c88:	221f      	movs	r2, #31
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4019      	ands	r1, r3
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	6818      	ldr	r0, [r3, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	3b23      	subs	r3, #35	; 0x23
 8000ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	430a      	orrs	r2, r1
 8000cac:	631a      	str	r2, [r3, #48]	; 0x30
 8000cae:	e01b      	b.n	8000ce8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	3b41      	subs	r3, #65	; 0x41
 8000cc2:	221f      	movs	r2, #31
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	4019      	ands	r1, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	6818      	ldr	r0, [r3, #0]
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	3b41      	subs	r3, #65	; 0x41
 8000cdc:	fa00 f203 	lsl.w	r2, r0, r3
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b09      	cmp	r3, #9
 8000cee:	d91c      	bls.n	8000d2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68d9      	ldr	r1, [r3, #12]
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4613      	mov	r3, r2
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	4413      	add	r3, r2
 8000d00:	3b1e      	subs	r3, #30
 8000d02:	2207      	movs	r2, #7
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	4019      	ands	r1, r3
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	6898      	ldr	r0, [r3, #8]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	4613      	mov	r3, r2
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	4413      	add	r3, r2
 8000d1a:	3b1e      	subs	r3, #30
 8000d1c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	430a      	orrs	r2, r1
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	e019      	b.n	8000d5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	6919      	ldr	r1, [r3, #16]
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4613      	mov	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	4413      	add	r3, r2
 8000d3a:	2207      	movs	r2, #7
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	4019      	ands	r1, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	6898      	ldr	r0, [r3, #8]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	fa00 f203 	lsl.w	r2, r0, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b10      	cmp	r3, #16
 8000d64:	d003      	beq.n	8000d6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d6a:	2b11      	cmp	r3, #17
 8000d6c:	d132      	bne.n	8000dd4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1d      	ldr	r2, [pc, #116]	; (8000de8 <HAL_ADC_ConfigChannel+0x1e4>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d125      	bne.n	8000dc4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d126      	bne.n	8000dd4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	689a      	ldr	r2, [r3, #8]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b10      	cmp	r3, #16
 8000d9c:	d11a      	bne.n	8000dd4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000d9e:	4b13      	ldr	r3, [pc, #76]	; (8000dec <HAL_ADC_ConfigChannel+0x1e8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <HAL_ADC_ConfigChannel+0x1ec>)
 8000da4:	fba2 2303 	umull	r2, r3, r2, r3
 8000da8:	0c9a      	lsrs	r2, r3, #18
 8000daa:	4613      	mov	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	4413      	add	r3, r2
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000db4:	e002      	b.n	8000dbc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1f9      	bne.n	8000db6 <HAL_ADC_ConfigChannel+0x1b2>
 8000dc2:	e007      	b.n	8000dd4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc8:	f043 0220 	orr.w	r2, r3, #32
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	40012400 	.word	0x40012400
 8000dec:	20000000 	.word	0x20000000
 8000df0:	431bde83 	.word	0x431bde83

08000df4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d040      	beq.n	8000e94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f042 0201 	orr.w	r2, r2, #1
 8000e20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <ADC_Enable+0xac>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <ADC_Enable+0xb0>)
 8000e28:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2c:	0c9b      	lsrs	r3, r3, #18
 8000e2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e30:	e002      	b.n	8000e38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	3b01      	subs	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d1f9      	bne.n	8000e32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e3e:	f7ff fc51 	bl	80006e4 <HAL_GetTick>
 8000e42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e44:	e01f      	b.n	8000e86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e46:	f7ff fc4d 	bl	80006e4 <HAL_GetTick>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	1ad3      	subs	r3, r2, r3
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d918      	bls.n	8000e86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d011      	beq.n	8000e86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	f043 0210 	orr.w	r2, r3, #16
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e72:	f043 0201 	orr.w	r2, r3, #1
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e007      	b.n	8000e96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d1d8      	bne.n	8000e46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	431bde83 	.word	0x431bde83

08000ea8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d12e      	bne.n	8000f20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f022 0201 	bic.w	r2, r2, #1
 8000ed0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ed2:	f7ff fc07 	bl	80006e4 <HAL_GetTick>
 8000ed6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ed8:	e01b      	b.n	8000f12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eda:	f7ff fc03 	bl	80006e4 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d914      	bls.n	8000f12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10d      	bne.n	8000f12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000efa:	f043 0210 	orr.w	r2, r3, #16
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f06:	f043 0201 	orr.w	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e007      	b.n	8000f22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d0dc      	beq.n	8000eda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f34:	2300      	movs	r3, #0
 8000f36:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d101      	bne.n	8000f4a <HAL_ADCEx_Calibration_Start+0x1e>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e097      	b.n	800107a <HAL_ADCEx_Calibration_Start+0x14e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ffa8 	bl	8000ea8 <ADC_ConversionStop_Disable>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f7ff ff49 	bl	8000df4 <ADC_Enable>
 8000f62:	4603      	mov	r3, r0
 8000f64:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8000f66:	7dfb      	ldrb	r3, [r7, #23]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f040 8081 	bne.w	8001070 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f76:	f023 0302 	bic.w	r3, r3, #2
 8000f7a:	f043 0202 	orr.w	r2, r3, #2
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f82:	4b40      	ldr	r3, [pc, #256]	; (8001084 <HAL_ADCEx_Calibration_Start+0x158>)
 8000f84:	681c      	ldr	r4, [r3, #0]
 8000f86:	2002      	movs	r0, #2
 8000f88:	f000 ffc4 	bl	8001f14 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8000f92:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8000f94:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8000f96:	e002      	b.n	8000f9e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1f9      	bne.n	8000f98 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 0208 	orr.w	r2, r2, #8
 8000fb2:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8000fb4:	f7ff fb96 	bl	80006e4 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000fba:	e01b      	b.n	8000ff4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000fbc:	f7ff fb92 	bl	80006e4 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	d914      	bls.n	8000ff4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00d      	beq.n	8000ff4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fdc:	f023 0312 	bic.w	r3, r3, #18
 8000fe0:	f043 0210 	orr.w	r2, r3, #16
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e042      	b.n	800107a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	f003 0308 	and.w	r3, r3, #8
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1dc      	bne.n	8000fbc <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f042 0204 	orr.w	r2, r2, #4
 8001010:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001012:	f7ff fb67 	bl	80006e4 <HAL_GetTick>
 8001016:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001018:	e01b      	b.n	8001052 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800101a:	f7ff fb63 	bl	80006e4 <HAL_GetTick>
 800101e:	4602      	mov	r2, r0
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	2b0a      	cmp	r3, #10
 8001026:	d914      	bls.n	8001052 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	2b00      	cmp	r3, #0
 8001034:	d00d      	beq.n	8001052 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103a:	f023 0312 	bic.w	r3, r3, #18
 800103e:	f043 0210 	orr.w	r2, r3, #16
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e013      	b.n	800107a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 0304 	and.w	r3, r3, #4
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1dc      	bne.n	800101a <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001064:	f023 0303 	bic.w	r3, r3, #3
 8001068:	f043 0201 	orr.w	r2, r3, #1
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001078:	7dfb      	ldrb	r3, [r7, #23]
}
 800107a:	4618      	mov	r0, r3
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}
 8001082:	bf00      	nop
 8001084:	20000000 	.word	0x20000000

08001088 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001090:	bf00      	nop
 8001092:	370c      	adds	r7, #12
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
	...

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bc80      	pop	{r7}
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4906      	ldr	r1, [pc, #24]	; (8001134 <__NVIC_EnableIRQ+0x34>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100

08001138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	6039      	str	r1, [r7, #0]
 8001142:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	2b00      	cmp	r3, #0
 800114a:	db0a      	blt.n	8001162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	b2da      	uxtb	r2, r3
 8001150:	490c      	ldr	r1, [pc, #48]	; (8001184 <__NVIC_SetPriority+0x4c>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	b2d2      	uxtb	r2, r2
 800115a:	440b      	add	r3, r1
 800115c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001160:	e00a      	b.n	8001178 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4908      	ldr	r1, [pc, #32]	; (8001188 <__NVIC_SetPriority+0x50>)
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	f003 030f 	and.w	r3, r3, #15
 800116e:	3b04      	subs	r3, #4
 8001170:	0112      	lsls	r2, r2, #4
 8001172:	b2d2      	uxtb	r2, r2
 8001174:	440b      	add	r3, r1
 8001176:	761a      	strb	r2, [r3, #24]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118c:	b480      	push	{r7}
 800118e:	b089      	sub	sp, #36	; 0x24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	f003 0307 	and.w	r3, r3, #7
 800119e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f1c3 0307 	rsb	r3, r3, #7
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	bf28      	it	cs
 80011aa:	2304      	movcs	r3, #4
 80011ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3304      	adds	r3, #4
 80011b2:	2b06      	cmp	r3, #6
 80011b4:	d902      	bls.n	80011bc <NVIC_EncodePriority+0x30>
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3b03      	subs	r3, #3
 80011ba:	e000      	b.n	80011be <NVIC_EncodePriority+0x32>
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c0:	f04f 32ff 	mov.w	r2, #4294967295
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	401a      	ands	r2, r3
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d4:	f04f 31ff 	mov.w	r1, #4294967295
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa01 f303 	lsl.w	r3, r1, r3
 80011de:	43d9      	mvns	r1, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	4313      	orrs	r3, r2
         );
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3724      	adds	r7, #36	; 0x24
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001200:	d301      	bcc.n	8001206 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001202:	2301      	movs	r3, #1
 8001204:	e00f      	b.n	8001226 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <SysTick_Config+0x40>)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120e:	210f      	movs	r1, #15
 8001210:	f04f 30ff 	mov.w	r0, #4294967295
 8001214:	f7ff ff90 	bl	8001138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x40>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ff2d 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124a:	b580      	push	{r7, lr}
 800124c:	b086      	sub	sp, #24
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	60b9      	str	r1, [r7, #8]
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800125c:	f7ff ff42 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001260:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68b9      	ldr	r1, [r7, #8]
 8001266:	6978      	ldr	r0, [r7, #20]
 8001268:	f7ff ff90 	bl	800118c <NVIC_EncodePriority>
 800126c:	4602      	mov	r2, r0
 800126e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001272:	4611      	mov	r1, r2
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff5f 	bl	8001138 <__NVIC_SetPriority>
}
 800127a:	bf00      	nop
 800127c:	3718      	adds	r7, #24
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff35 	bl	8001100 <__NVIC_EnableIRQ>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff ffa2 	bl	80011f0 <SysTick_Config>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
	...

080012b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b08b      	sub	sp, #44	; 0x2c
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ca:	e161      	b.n	8001590 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012cc:	2201      	movs	r2, #1
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	69fa      	ldr	r2, [r7, #28]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	f040 8150 	bne.w	800158a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a97      	ldr	r2, [pc, #604]	; (800154c <HAL_GPIO_Init+0x294>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d05e      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 80012f4:	4a95      	ldr	r2, [pc, #596]	; (800154c <HAL_GPIO_Init+0x294>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d875      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 80012fa:	4a95      	ldr	r2, [pc, #596]	; (8001550 <HAL_GPIO_Init+0x298>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d058      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001300:	4a93      	ldr	r2, [pc, #588]	; (8001550 <HAL_GPIO_Init+0x298>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d86f      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001306:	4a93      	ldr	r2, [pc, #588]	; (8001554 <HAL_GPIO_Init+0x29c>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d052      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 800130c:	4a91      	ldr	r2, [pc, #580]	; (8001554 <HAL_GPIO_Init+0x29c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d869      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001312:	4a91      	ldr	r2, [pc, #580]	; (8001558 <HAL_GPIO_Init+0x2a0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d04c      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001318:	4a8f      	ldr	r2, [pc, #572]	; (8001558 <HAL_GPIO_Init+0x2a0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d863      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 800131e:	4a8f      	ldr	r2, [pc, #572]	; (800155c <HAL_GPIO_Init+0x2a4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d046      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
 8001324:	4a8d      	ldr	r2, [pc, #564]	; (800155c <HAL_GPIO_Init+0x2a4>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d85d      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 800132a:	2b12      	cmp	r3, #18
 800132c:	d82a      	bhi.n	8001384 <HAL_GPIO_Init+0xcc>
 800132e:	2b12      	cmp	r3, #18
 8001330:	d859      	bhi.n	80013e6 <HAL_GPIO_Init+0x12e>
 8001332:	a201      	add	r2, pc, #4	; (adr r2, 8001338 <HAL_GPIO_Init+0x80>)
 8001334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001338:	080013b3 	.word	0x080013b3
 800133c:	0800138d 	.word	0x0800138d
 8001340:	0800139f 	.word	0x0800139f
 8001344:	080013e1 	.word	0x080013e1
 8001348:	080013e7 	.word	0x080013e7
 800134c:	080013e7 	.word	0x080013e7
 8001350:	080013e7 	.word	0x080013e7
 8001354:	080013e7 	.word	0x080013e7
 8001358:	080013e7 	.word	0x080013e7
 800135c:	080013e7 	.word	0x080013e7
 8001360:	080013e7 	.word	0x080013e7
 8001364:	080013e7 	.word	0x080013e7
 8001368:	080013e7 	.word	0x080013e7
 800136c:	080013e7 	.word	0x080013e7
 8001370:	080013e7 	.word	0x080013e7
 8001374:	080013e7 	.word	0x080013e7
 8001378:	080013e7 	.word	0x080013e7
 800137c:	08001395 	.word	0x08001395
 8001380:	080013a9 	.word	0x080013a9
 8001384:	4a76      	ldr	r2, [pc, #472]	; (8001560 <HAL_GPIO_Init+0x2a8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d013      	beq.n	80013b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800138a:	e02c      	b.n	80013e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	623b      	str	r3, [r7, #32]
          break;
 8001392:	e029      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	3304      	adds	r3, #4
 800139a:	623b      	str	r3, [r7, #32]
          break;
 800139c:	e024      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	3308      	adds	r3, #8
 80013a4:	623b      	str	r3, [r7, #32]
          break;
 80013a6:	e01f      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	330c      	adds	r3, #12
 80013ae:	623b      	str	r3, [r7, #32]
          break;
 80013b0:	e01a      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ba:	2304      	movs	r3, #4
 80013bc:	623b      	str	r3, [r7, #32]
          break;
 80013be:	e013      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d105      	bne.n	80013d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c8:	2308      	movs	r3, #8
 80013ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	611a      	str	r2, [r3, #16]
          break;
 80013d2:	e009      	b.n	80013e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d4:	2308      	movs	r3, #8
 80013d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	615a      	str	r2, [r3, #20]
          break;
 80013de:	e003      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
          break;
 80013e4:	e000      	b.n	80013e8 <HAL_GPIO_Init+0x130>
          break;
 80013e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	2bff      	cmp	r3, #255	; 0xff
 80013ec:	d801      	bhi.n	80013f2 <HAL_GPIO_Init+0x13a>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	e001      	b.n	80013f6 <HAL_GPIO_Init+0x13e>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	3304      	adds	r3, #4
 80013f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	2bff      	cmp	r3, #255	; 0xff
 80013fc:	d802      	bhi.n	8001404 <HAL_GPIO_Init+0x14c>
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x152>
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	3b08      	subs	r3, #8
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	210f      	movs	r1, #15
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	401a      	ands	r2, r3
 800141c:	6a39      	ldr	r1, [r7, #32]
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	431a      	orrs	r2, r3
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80a9 	beq.w	800158a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001438:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <HAL_GPIO_Init+0x2ac>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a49      	ldr	r2, [pc, #292]	; (8001564 <HAL_GPIO_Init+0x2ac>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b47      	ldr	r3, [pc, #284]	; (8001564 <HAL_GPIO_Init+0x2ac>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001450:	4a45      	ldr	r2, [pc, #276]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4a3d      	ldr	r2, [pc, #244]	; (800156c <HAL_GPIO_Init+0x2b4>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d00d      	beq.n	8001498 <HAL_GPIO_Init+0x1e0>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a3c      	ldr	r2, [pc, #240]	; (8001570 <HAL_GPIO_Init+0x2b8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d007      	beq.n	8001494 <HAL_GPIO_Init+0x1dc>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a3b      	ldr	r2, [pc, #236]	; (8001574 <HAL_GPIO_Init+0x2bc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d101      	bne.n	8001490 <HAL_GPIO_Init+0x1d8>
 800148c:	2302      	movs	r3, #2
 800148e:	e004      	b.n	800149a <HAL_GPIO_Init+0x1e2>
 8001490:	2303      	movs	r3, #3
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x1e2>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <HAL_GPIO_Init+0x1e2>
 8001498:	2300      	movs	r3, #0
 800149a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149c:	f002 0203 	and.w	r2, r2, #3
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	4093      	lsls	r3, r2
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014aa:	492f      	ldr	r1, [pc, #188]	; (8001568 <HAL_GPIO_Init+0x2b0>)
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014c4:	4b2c      	ldr	r3, [pc, #176]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	492b      	ldr	r1, [pc, #172]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	608b      	str	r3, [r1, #8]
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	43db      	mvns	r3, r3
 80014da:	4927      	ldr	r1, [pc, #156]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 80014dc:	4013      	ands	r3, r2
 80014de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	4921      	ldr	r1, [pc, #132]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	60cb      	str	r3, [r1, #12]
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	43db      	mvns	r3, r3
 8001502:	491d      	ldr	r1, [pc, #116]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 8001504:	4013      	ands	r3, r2
 8001506:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001514:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4917      	ldr	r1, [pc, #92]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	604b      	str	r3, [r1, #4]
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	43db      	mvns	r3, r3
 800152a:	4913      	ldr	r1, [pc, #76]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 800152c:	4013      	ands	r3, r2
 800152e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01f      	beq.n	800157c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	490d      	ldr	r1, [pc, #52]	; (8001578 <HAL_GPIO_Init+0x2c0>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	600b      	str	r3, [r1, #0]
 8001548:	e01f      	b.n	800158a <HAL_GPIO_Init+0x2d2>
 800154a:	bf00      	nop
 800154c:	10320000 	.word	0x10320000
 8001550:	10310000 	.word	0x10310000
 8001554:	10220000 	.word	0x10220000
 8001558:	10210000 	.word	0x10210000
 800155c:	10120000 	.word	0x10120000
 8001560:	10110000 	.word	0x10110000
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	40010800 	.word	0x40010800
 8001570:	40010c00 	.word	0x40010c00
 8001574:	40011000 	.word	0x40011000
 8001578:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_GPIO_Init+0x2f4>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	43db      	mvns	r3, r3
 8001584:	4909      	ldr	r1, [pc, #36]	; (80015ac <HAL_GPIO_Init+0x2f4>)
 8001586:	4013      	ands	r3, r2
 8001588:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	3301      	adds	r3, #1
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	fa22 f303 	lsr.w	r3, r2, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	f47f ae96 	bne.w	80012cc <HAL_GPIO_Init+0x14>
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	372c      	adds	r7, #44	; 0x2c
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	40010400 	.word	0x40010400

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e272      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 8087 	beq.w	80016de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015d0:	4b92      	ldr	r3, [pc, #584]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 030c 	and.w	r3, r3, #12
 80015d8:	2b04      	cmp	r3, #4
 80015da:	d00c      	beq.n	80015f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015dc:	4b8f      	ldr	r3, [pc, #572]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 030c 	and.w	r3, r3, #12
 80015e4:	2b08      	cmp	r3, #8
 80015e6:	d112      	bne.n	800160e <HAL_RCC_OscConfig+0x5e>
 80015e8:	4b8c      	ldr	r3, [pc, #560]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015f4:	d10b      	bne.n	800160e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f6:	4b89      	ldr	r3, [pc, #548]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d06c      	beq.n	80016dc <HAL_RCC_OscConfig+0x12c>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d168      	bne.n	80016dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e24c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x76>
 8001618:	4b80      	ldr	r3, [pc, #512]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a7f      	ldr	r2, [pc, #508]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 800161e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001622:	6013      	str	r3, [r2, #0]
 8001624:	e02e      	b.n	8001684 <HAL_RCC_OscConfig+0xd4>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x98>
 800162e:	4b7b      	ldr	r3, [pc, #492]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a7a      	ldr	r2, [pc, #488]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001634:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b78      	ldr	r3, [pc, #480]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a77      	ldr	r2, [pc, #476]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001640:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e01d      	b.n	8001684 <HAL_RCC_OscConfig+0xd4>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0xbc>
 8001652:	4b72      	ldr	r3, [pc, #456]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a71      	ldr	r2, [pc, #452]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b6f      	ldr	r3, [pc, #444]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a6e      	ldr	r2, [pc, #440]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e00b      	b.n	8001684 <HAL_RCC_OscConfig+0xd4>
 800166c:	4b6b      	ldr	r3, [pc, #428]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a6a      	ldr	r2, [pc, #424]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	4b68      	ldr	r3, [pc, #416]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a67      	ldr	r2, [pc, #412]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 800167e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001682:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff f82a 	bl	80006e4 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff f826 	bl	80006e4 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e200      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b5d      	ldr	r3, [pc, #372]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0xe4>
 80016b2:	e014      	b.n	80016de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b4:	f7ff f816 	bl	80006e4 <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016bc:	f7ff f812 	bl	80006e4 <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e1ec      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	4b53      	ldr	r3, [pc, #332]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x10c>
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d063      	beq.n	80017b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ea:	4b4c      	ldr	r3, [pc, #304]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00b      	beq.n	800170e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016f6:	4b49      	ldr	r3, [pc, #292]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d11c      	bne.n	800173c <HAL_RCC_OscConfig+0x18c>
 8001702:	4b46      	ldr	r3, [pc, #280]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d116      	bne.n	800173c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170e:	4b43      	ldr	r3, [pc, #268]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d005      	beq.n	8001726 <HAL_RCC_OscConfig+0x176>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d001      	beq.n	8001726 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e1c0      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b3d      	ldr	r3, [pc, #244]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4939      	ldr	r1, [pc, #228]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001736:	4313      	orrs	r3, r2
 8001738:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173a:	e03a      	b.n	80017b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d020      	beq.n	8001786 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001744:	4b36      	ldr	r3, [pc, #216]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7fe ffcb 	bl	80006e4 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001752:	f7fe ffc7 	bl	80006e4 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e1a1      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	695b      	ldr	r3, [r3, #20]
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	4927      	ldr	r1, [pc, #156]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 8001780:	4313      	orrs	r3, r2
 8001782:	600b      	str	r3, [r1, #0]
 8001784:	e015      	b.n	80017b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_RCC_OscConfig+0x270>)
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7fe ffaa 	bl	80006e4 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001794:	f7fe ffa6 	bl	80006e4 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e180      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	4b1d      	ldr	r3, [pc, #116]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1f0      	bne.n	8001794 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d03a      	beq.n	8001834 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d019      	beq.n	80017fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <HAL_RCC_OscConfig+0x274>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7fe ff8a 	bl	80006e4 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7fe ff86 	bl	80006e4 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e160      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_RCC_OscConfig+0x26c>)
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f000 faba 	bl	8001d6c <RCC_Delay>
 80017f8:	e01c      	b.n	8001834 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_RCC_OscConfig+0x274>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001800:	f7fe ff70 	bl	80006e4 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001806:	e00f      	b.n	8001828 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7fe ff6c 	bl	80006e4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d908      	bls.n	8001828 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e146      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
 800181a:	bf00      	nop
 800181c:	40021000 	.word	0x40021000
 8001820:	42420000 	.word	0x42420000
 8001824:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001828:	4b92      	ldr	r3, [pc, #584]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e9      	bne.n	8001808 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0304 	and.w	r3, r3, #4
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 80a6 	beq.w	800198e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001846:	4b8b      	ldr	r3, [pc, #556]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d10d      	bne.n	800186e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	4b88      	ldr	r3, [pc, #544]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a87      	ldr	r2, [pc, #540]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b85      	ldr	r3, [pc, #532]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800186a:	2301      	movs	r3, #1
 800186c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186e:	4b82      	ldr	r3, [pc, #520]	; (8001a78 <HAL_RCC_OscConfig+0x4c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001876:	2b00      	cmp	r3, #0
 8001878:	d118      	bne.n	80018ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800187a:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <HAL_RCC_OscConfig+0x4c8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7e      	ldr	r2, [pc, #504]	; (8001a78 <HAL_RCC_OscConfig+0x4c8>)
 8001880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001886:	f7fe ff2d 	bl	80006e4 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800188e:	f7fe ff29 	bl	80006e4 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b64      	cmp	r3, #100	; 0x64
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e103      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	4b75      	ldr	r3, [pc, #468]	; (8001a78 <HAL_RCC_OscConfig+0x4c8>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x312>
 80018b4:	4b6f      	ldr	r3, [pc, #444]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4a6e      	ldr	r2, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6213      	str	r3, [r2, #32]
 80018c0:	e02d      	b.n	800191e <HAL_RCC_OscConfig+0x36e>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x334>
 80018ca:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	4a69      	ldr	r2, [pc, #420]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	6213      	str	r3, [r2, #32]
 80018d6:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	4a66      	ldr	r2, [pc, #408]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f023 0304 	bic.w	r3, r3, #4
 80018e0:	6213      	str	r3, [r2, #32]
 80018e2:	e01c      	b.n	800191e <HAL_RCC_OscConfig+0x36e>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d10c      	bne.n	8001906 <HAL_RCC_OscConfig+0x356>
 80018ec:	4b61      	ldr	r3, [pc, #388]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	4a60      	ldr	r2, [pc, #384]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6213      	str	r3, [r2, #32]
 80018f8:	4b5e      	ldr	r3, [pc, #376]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4a5d      	ldr	r2, [pc, #372]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	6213      	str	r3, [r2, #32]
 8001904:	e00b      	b.n	800191e <HAL_RCC_OscConfig+0x36e>
 8001906:	4b5b      	ldr	r3, [pc, #364]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4a5a      	ldr	r2, [pc, #360]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	6213      	str	r3, [r2, #32]
 8001912:	4b58      	ldr	r3, [pc, #352]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	6a1b      	ldr	r3, [r3, #32]
 8001916:	4a57      	ldr	r2, [pc, #348]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f023 0304 	bic.w	r3, r3, #4
 800191c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d015      	beq.n	8001952 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001926:	f7fe fedd 	bl	80006e4 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7fe fed9 	bl	80006e4 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	; 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e0b1      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001944:	4b4b      	ldr	r3, [pc, #300]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0ee      	beq.n	800192e <HAL_RCC_OscConfig+0x37e>
 8001950:	e014      	b.n	800197c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001952:	f7fe fec7 	bl	80006e4 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	e00a      	b.n	8001970 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7fe fec3 	bl	80006e4 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	f241 3288 	movw	r2, #5000	; 0x1388
 8001968:	4293      	cmp	r3, r2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e09b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001970:	4b40      	ldr	r3, [pc, #256]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1ee      	bne.n	800195a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800197c:	7dfb      	ldrb	r3, [r7, #23]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d105      	bne.n	800198e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001982:	4b3c      	ldr	r3, [pc, #240]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8087 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001998:	4b36      	ldr	r3, [pc, #216]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b08      	cmp	r3, #8
 80019a2:	d061      	beq.n	8001a68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d146      	bne.n	8001a3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ac:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7fe fe97 	bl	80006e4 <HAL_GetTick>
 80019b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019b8:	e008      	b.n	80019cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ba:	f7fe fe93 	bl	80006e4 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d901      	bls.n	80019cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e06d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019cc:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f0      	bne.n	80019ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e0:	d108      	bne.n	80019f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019e2:	4b24      	ldr	r3, [pc, #144]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	4921      	ldr	r1, [pc, #132]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a19      	ldr	r1, [r3, #32]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a04:	430b      	orrs	r3, r1
 8001a06:	491b      	ldr	r1, [pc, #108]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7fe fe67 	bl	80006e4 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7fe fe63 	bl	80006e4 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e03d      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x46a>
 8001a38:	e035      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a3a:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_RCC_OscConfig+0x4cc>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7fe fe50 	bl	80006e4 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7fe fe4c 	bl	80006e4 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e026      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x498>
 8001a66:	e01e      	b.n	8001aa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69db      	ldr	r3, [r3, #28]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d107      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e019      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40007000 	.word	0x40007000
 8001a7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_OscConfig+0x500>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d106      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d001      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e000      	b.n	8001aa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0d0      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d910      	bls.n	8001af8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	4b67      	ldr	r3, [pc, #412]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 0207 	bic.w	r2, r3, #7
 8001ade:	4965      	ldr	r1, [pc, #404]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0b8      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d020      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b10:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4a58      	ldr	r2, [pc, #352]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b16:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0308 	and.w	r3, r3, #8
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d005      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b28:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b2e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b34:	4b50      	ldr	r3, [pc, #320]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	494d      	ldr	r1, [pc, #308]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d040      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b47      	ldr	r3, [pc, #284]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d115      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e07f      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e073      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e06b      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b92:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f023 0203 	bic.w	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4936      	ldr	r1, [pc, #216]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba4:	f7fe fd9e 	bl	80006e4 <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bac:	f7fe fd9a 	bl	80006e4 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e053      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 020c 	and.w	r2, r3, #12
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1eb      	bne.n	8001bac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d210      	bcs.n	8001c04 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 0207 	bic.w	r2, r3, #7
 8001bea:	4922      	ldr	r1, [pc, #136]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e032      	b.n	8001c6a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c10:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	4916      	ldr	r1, [pc, #88]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c2e:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	00db      	lsls	r3, r3, #3
 8001c3c:	490e      	ldr	r1, [pc, #56]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c42:	f000 f821 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001c46:	4602      	mov	r2, r0
 8001c48:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	490a      	ldr	r1, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c54:	5ccb      	ldrb	r3, [r1, r3]
 8001c56:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5a:	4a09      	ldr	r2, [pc, #36]	; (8001c80 <HAL_RCC_ClockConfig+0x1cc>)
 8001c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_RCC_ClockConfig+0x1d0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fcfc 	bl	8000660 <HAL_InitTick>

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40022000 	.word	0x40022000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	0800291c 	.word	0x0800291c
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000004 	.word	0x20000004

08001c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d002      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x30>
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d003      	beq.n	8001cbe <HAL_RCC_GetSysClockFreq+0x36>
 8001cb6:	e027      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cb8:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cba:	613b      	str	r3, [r7, #16]
      break;
 8001cbc:	e027      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	0c9b      	lsrs	r3, r3, #18
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	4a17      	ldr	r2, [pc, #92]	; (8001d24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cc8:	5cd3      	ldrb	r3, [r2, r3]
 8001cca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x94>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0c5b      	lsrs	r3, r3, #17
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	4a11      	ldr	r2, [pc, #68]	; (8001d28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ce2:	5cd3      	ldrb	r3, [r2, r3]
 8001ce4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cea:	fb03 f202 	mul.w	r2, r3, r2
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	e004      	b.n	8001d02 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001cfc:	fb02 f303 	mul.w	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	613b      	str	r3, [r7, #16]
      break;
 8001d06:	e002      	b.n	8001d0e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d0a:	613b      	str	r3, [r7, #16]
      break;
 8001d0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d0e:	693b      	ldr	r3, [r7, #16]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	007a1200 	.word	0x007a1200
 8001d24:	08002934 	.word	0x08002934
 8001d28:	08002944 	.word	0x08002944
 8001d2c:	003d0900 	.word	0x003d0900

08001d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d34:	4b02      	ldr	r3, [pc, #8]	; (8001d40 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	20000000 	.word	0x20000000

08001d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d48:	f7ff fff2 	bl	8001d30 <HAL_RCC_GetHCLKFreq>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	0adb      	lsrs	r3, r3, #11
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	4903      	ldr	r1, [pc, #12]	; (8001d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d5a:	5ccb      	ldrb	r3, [r1, r3]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	0800292c 	.word	0x0800292c

08001d6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <RCC_Delay+0x34>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <RCC_Delay+0x38>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	0a5b      	lsrs	r3, r3, #9
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	fb02 f303 	mul.w	r3, r2, r3
 8001d86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d88:	bf00      	nop
  }
  while (Delay --);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1e5a      	subs	r2, r3, #1
 8001d8e:	60fa      	str	r2, [r7, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1f9      	bne.n	8001d88 <RCC_Delay+0x1c>
}
 8001d94:	bf00      	nop
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bc80      	pop	{r7}
 8001d9e:	4770      	bx	lr
 8001da0:	20000000 	.word	0x20000000
 8001da4:	10624dd3 	.word	0x10624dd3

08001da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d07d      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc8:	4b4f      	ldr	r3, [pc, #316]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10d      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd4:	4b4c      	ldr	r3, [pc, #304]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	4a4b      	ldr	r2, [pc, #300]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dde:	61d3      	str	r3, [r2, #28]
 8001de0:	4b49      	ldr	r3, [pc, #292]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dec:	2301      	movs	r3, #1
 8001dee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d118      	bne.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfc:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a42      	ldr	r2, [pc, #264]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e08:	f7fe fc6c 	bl	80006e4 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0e:	e008      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e10:	f7fe fc68 	bl	80006e4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e06d      	b.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d02e      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d027      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e56:	4b2e      	ldr	r3, [pc, #184]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	; (8001f10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e62:	4a29      	ldr	r2, [pc, #164]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d014      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e72:	f7fe fc37 	bl	80006e4 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7fe fc33 	bl	80006e4 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e036      	b.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e90:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ee      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	4917      	ldr	r1, [pc, #92]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b14      	ldr	r3, [pc, #80]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb6:	69db      	ldr	r3, [r3, #28]
 8001eb8:	4a13      	ldr	r2, [pc, #76]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	490b      	ldr	r1, [pc, #44]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d008      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	4904      	ldr	r1, [pc, #16]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40007000 	.word	0x40007000
 8001f10:	42420440 	.word	0x42420440

08001f14 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b088      	sub	sp, #32
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
 8001f24:	2300      	movs	r3, #0
 8001f26:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b10      	cmp	r3, #16
 8001f34:	d00a      	beq.n	8001f4c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	f200 808a 	bhi.w	8002052 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d045      	beq.n	8001fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d075      	beq.n	8002036 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001f4a:	e082      	b.n	8002052 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001f4c:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001f52:	4b45      	ldr	r3, [pc, #276]	; (8002068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d07b      	beq.n	8002056 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	0c9b      	lsrs	r3, r3, #18
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	4a41      	ldr	r2, [pc, #260]	; (800206c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001f68:	5cd3      	ldrb	r3, [r2, r3]
 8001f6a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d015      	beq.n	8001fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f76:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	0c5b      	lsrs	r3, r3, #17
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	4a3b      	ldr	r2, [pc, #236]	; (8002070 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001f82:	5cd3      	ldrb	r3, [r2, r3]
 8001f84:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00d      	beq.n	8001fac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001f90:	4a38      	ldr	r2, [pc, #224]	; (8002074 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	e004      	b.n	8001fac <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4a34      	ldr	r2, [pc, #208]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001fac:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb8:	d102      	bne.n	8001fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	61bb      	str	r3, [r7, #24]
      break;
 8001fbe:	e04a      	b.n	8002056 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4a2d      	ldr	r2, [pc, #180]	; (800207c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	61bb      	str	r3, [r7, #24]
      break;
 8001fce:	e042      	b.n	8002056 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe0:	d108      	bne.n	8001ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	e01f      	b.n	8002034 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ffe:	d109      	bne.n	8002014 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800200c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002010:	61bb      	str	r3, [r7, #24]
 8002012:	e00f      	b.n	8002034 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800201e:	d11c      	bne.n	800205a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d016      	beq.n	800205a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800202c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002030:	61bb      	str	r3, [r7, #24]
      break;
 8002032:	e012      	b.n	800205a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002034:	e011      	b.n	800205a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002036:	f7ff fe85 	bl	8001d44 <HAL_RCC_GetPCLK2Freq>
 800203a:	4602      	mov	r2, r0
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	0b9b      	lsrs	r3, r3, #14
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	3301      	adds	r3, #1
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fbb2 f3f3 	udiv	r3, r2, r3
 800204e:	61bb      	str	r3, [r7, #24]
      break;
 8002050:	e004      	b.n	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002052:	bf00      	nop
 8002054:	e002      	b.n	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002056:	bf00      	nop
 8002058:	e000      	b.n	800205c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800205a:	bf00      	nop
    }
  }
  return (frequency);
 800205c:	69bb      	ldr	r3, [r7, #24]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3720      	adds	r7, #32
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	08002948 	.word	0x08002948
 8002070:	08002958 	.word	0x08002958
 8002074:	007a1200 	.word	0x007a1200
 8002078:	003d0900 	.word	0x003d0900
 800207c:	aaaaaaab 	.word	0xaaaaaaab

08002080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e041      	b.n	8002116 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d106      	bne.n	80020ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7fe fa1a 	bl	80004e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2202      	movs	r2, #2
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f000 f98c 	bl	80023dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_TIM_PWM_Start+0x24>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e022      	b.n	800218a <HAL_TIM_PWM_Start+0x6a>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b04      	cmp	r3, #4
 8002148:	d109      	bne.n	800215e <HAL_TIM_PWM_Start+0x3e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	e015      	b.n	800218a <HAL_TIM_PWM_Start+0x6a>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b08      	cmp	r3, #8
 8002162:	d109      	bne.n	8002178 <HAL_TIM_PWM_Start+0x58>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	e008      	b.n	800218a <HAL_TIM_PWM_Start+0x6a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	bf14      	ite	ne
 8002184:	2301      	movne	r3, #1
 8002186:	2300      	moveq	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e059      	b.n	8002246 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d104      	bne.n	80021a2 <HAL_TIM_PWM_Start+0x82>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a0:	e013      	b.n	80021ca <HAL_TIM_PWM_Start+0xaa>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d104      	bne.n	80021b2 <HAL_TIM_PWM_Start+0x92>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b0:	e00b      	b.n	80021ca <HAL_TIM_PWM_Start+0xaa>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d104      	bne.n	80021c2 <HAL_TIM_PWM_Start+0xa2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021c0:	e003      	b.n	80021ca <HAL_TIM_PWM_Start+0xaa>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2201      	movs	r2, #1
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 faee 	bl	80027b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <HAL_TIM_PWM_Start+0x130>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d107      	bne.n	80021f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a16      	ldr	r2, [pc, #88]	; (8002250 <HAL_TIM_PWM_Start+0x130>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_TIM_PWM_Start+0xf0>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002204:	d004      	beq.n	8002210 <HAL_TIM_PWM_Start+0xf0>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <HAL_TIM_PWM_Start+0x134>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d111      	bne.n	8002234 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b06      	cmp	r3, #6
 8002220:	d010      	beq.n	8002244 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f042 0201 	orr.w	r2, r2, #1
 8002230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002232:	e007      	b.n	8002244 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40000400 	.word	0x40000400

08002258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002264:	2300      	movs	r3, #0
 8002266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226e:	2b01      	cmp	r3, #1
 8002270:	d101      	bne.n	8002276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002272:	2302      	movs	r3, #2
 8002274:	e0ae      	b.n	80023d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2201      	movs	r2, #1
 800227a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b0c      	cmp	r3, #12
 8002282:	f200 809f 	bhi.w	80023c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002286:	a201      	add	r2, pc, #4	; (adr r2, 800228c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	080022c1 	.word	0x080022c1
 8002290:	080023c5 	.word	0x080023c5
 8002294:	080023c5 	.word	0x080023c5
 8002298:	080023c5 	.word	0x080023c5
 800229c:	08002301 	.word	0x08002301
 80022a0:	080023c5 	.word	0x080023c5
 80022a4:	080023c5 	.word	0x080023c5
 80022a8:	080023c5 	.word	0x080023c5
 80022ac:	08002343 	.word	0x08002343
 80022b0:	080023c5 	.word	0x080023c5
 80022b4:	080023c5 	.word	0x080023c5
 80022b8:	080023c5 	.word	0x080023c5
 80022bc:	08002383 	.word	0x08002383
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f8ec 	bl	80024a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0208 	orr.w	r2, r2, #8
 80022da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	699a      	ldr	r2, [r3, #24]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0204 	bic.w	r2, r2, #4
 80022ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6999      	ldr	r1, [r3, #24]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	619a      	str	r2, [r3, #24]
      break;
 80022fe:	e064      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f932 	bl	8002570 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800231a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800232a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6999      	ldr	r1, [r3, #24]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	021a      	lsls	r2, r3, #8
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	430a      	orrs	r2, r1
 800233e:	619a      	str	r2, [r3, #24]
      break;
 8002340:	e043      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f97b 	bl	8002644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69da      	ldr	r2, [r3, #28]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0208 	orr.w	r2, r2, #8
 800235c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	69da      	ldr	r2, [r3, #28]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0204 	bic.w	r2, r2, #4
 800236c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69d9      	ldr	r1, [r3, #28]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	61da      	str	r2, [r3, #28]
      break;
 8002380:	e023      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f9c5 	bl	8002718 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800239c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69d9      	ldr	r1, [r3, #28]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	021a      	lsls	r2, r3, #8
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	61da      	str	r2, [r3, #28]
      break;
 80023c2:	e002      	b.n	80023ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	75fb      	strb	r3, [r7, #23]
      break;
 80023c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a2b      	ldr	r2, [pc, #172]	; (800249c <TIM_Base_SetConfig+0xc0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d007      	beq.n	8002404 <TIM_Base_SetConfig+0x28>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fa:	d003      	beq.n	8002404 <TIM_Base_SetConfig+0x28>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <TIM_Base_SetConfig+0xc4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d108      	bne.n	8002416 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800240a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	4313      	orrs	r3, r2
 8002414:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a20      	ldr	r2, [pc, #128]	; (800249c <TIM_Base_SetConfig+0xc0>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d007      	beq.n	800242e <TIM_Base_SetConfig+0x52>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002424:	d003      	beq.n	800242e <TIM_Base_SetConfig+0x52>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a1d      	ldr	r2, [pc, #116]	; (80024a0 <TIM_Base_SetConfig+0xc4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d108      	bne.n	8002440 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a0d      	ldr	r2, [pc, #52]	; (800249c <TIM_Base_SetConfig+0xc0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d103      	bne.n	8002474 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f023 0201 	bic.w	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	611a      	str	r2, [r3, #16]
  }
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	bc80      	pop	{r7}
 800249a:	4770      	bx	lr
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40000400 	.word	0x40000400

080024a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	f023 0201 	bic.w	r2, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0303 	bic.w	r3, r3, #3
 80024da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f023 0302 	bic.w	r3, r3, #2
 80024ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a1c      	ldr	r2, [pc, #112]	; (800256c <TIM_OC1_SetConfig+0xc8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d10c      	bne.n	800251a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	f023 0308 	bic.w	r3, r3, #8
 8002506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a13      	ldr	r2, [pc, #76]	; (800256c <TIM_OC1_SetConfig+0xc8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d111      	bne.n	8002546 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4313      	orrs	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685a      	ldr	r2, [r3, #4]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	621a      	str	r2, [r3, #32]
}
 8002560:	bf00      	nop
 8002562:	371c      	adds	r7, #28
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40012c00 	.word	0x40012c00

08002570 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002570:	b480      	push	{r7}
 8002572:	b087      	sub	sp, #28
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f023 0210 	bic.w	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800259e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	021b      	lsls	r3, r3, #8
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f023 0320 	bic.w	r3, r3, #32
 80025ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a1d      	ldr	r2, [pc, #116]	; (8002640 <TIM_OC2_SetConfig+0xd0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d10d      	bne.n	80025ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a14      	ldr	r2, [pc, #80]	; (8002640 <TIM_OC2_SetConfig+0xd0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d113      	bne.n	800261c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	621a      	str	r2, [r3, #32]
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	40012c00 	.word	0x40012c00

08002644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800268c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4313      	orrs	r3, r2
 8002698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <TIM_OC3_SetConfig+0xd0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d10d      	bne.n	80026be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	021b      	lsls	r3, r3, #8
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a14      	ldr	r2, [pc, #80]	; (8002714 <TIM_OC3_SetConfig+0xd0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d113      	bne.n	80026ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	4313      	orrs	r3, r2
 80026e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	621a      	str	r2, [r3, #32]
}
 8002708:	bf00      	nop
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40012c00 	.word	0x40012c00

08002718 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800274e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	031b      	lsls	r3, r3, #12
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a0f      	ldr	r2, [pc, #60]	; (80027b0 <TIM_OC4_SetConfig+0x98>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d109      	bne.n	800278c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800277e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	019b      	lsls	r3, r3, #6
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	621a      	str	r2, [r3, #32]
}
 80027a6:	bf00      	nop
 80027a8:	371c      	adds	r7, #28
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	40012c00 	.word	0x40012c00

080027b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b087      	sub	sp, #28
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2201      	movs	r2, #1
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	401a      	ands	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a1a      	ldr	r2, [r3, #32]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f003 031f 	and.w	r3, r3, #31
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	fa01 f303 	lsl.w	r3, r1, r3
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002810:	2302      	movs	r3, #2
 8002812:	e041      	b.n	8002898 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800283a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a14      	ldr	r2, [pc, #80]	; (80028a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002860:	d004      	beq.n	800286c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a10      	ldr	r2, [pc, #64]	; (80028a8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d10c      	bne.n	8002886 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002872:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	4313      	orrs	r3, r2
 800287c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68ba      	ldr	r2, [r7, #8]
 8002884:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40012c00 	.word	0x40012c00
 80028a8:	40000400 	.word	0x40000400

080028ac <memset>:
 80028ac:	4603      	mov	r3, r0
 80028ae:	4402      	add	r2, r0
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d100      	bne.n	80028b6 <memset+0xa>
 80028b4:	4770      	bx	lr
 80028b6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ba:	e7f9      	b.n	80028b0 <memset+0x4>

080028bc <__libc_init_array>:
 80028bc:	b570      	push	{r4, r5, r6, lr}
 80028be:	2600      	movs	r6, #0
 80028c0:	4d0c      	ldr	r5, [pc, #48]	; (80028f4 <__libc_init_array+0x38>)
 80028c2:	4c0d      	ldr	r4, [pc, #52]	; (80028f8 <__libc_init_array+0x3c>)
 80028c4:	1b64      	subs	r4, r4, r5
 80028c6:	10a4      	asrs	r4, r4, #2
 80028c8:	42a6      	cmp	r6, r4
 80028ca:	d109      	bne.n	80028e0 <__libc_init_array+0x24>
 80028cc:	f000 f81a 	bl	8002904 <_init>
 80028d0:	2600      	movs	r6, #0
 80028d2:	4d0a      	ldr	r5, [pc, #40]	; (80028fc <__libc_init_array+0x40>)
 80028d4:	4c0a      	ldr	r4, [pc, #40]	; (8002900 <__libc_init_array+0x44>)
 80028d6:	1b64      	subs	r4, r4, r5
 80028d8:	10a4      	asrs	r4, r4, #2
 80028da:	42a6      	cmp	r6, r4
 80028dc:	d105      	bne.n	80028ea <__libc_init_array+0x2e>
 80028de:	bd70      	pop	{r4, r5, r6, pc}
 80028e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028e4:	4798      	blx	r3
 80028e6:	3601      	adds	r6, #1
 80028e8:	e7ee      	b.n	80028c8 <__libc_init_array+0xc>
 80028ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ee:	4798      	blx	r3
 80028f0:	3601      	adds	r6, #1
 80028f2:	e7f2      	b.n	80028da <__libc_init_array+0x1e>
 80028f4:	0800295c 	.word	0x0800295c
 80028f8:	0800295c 	.word	0x0800295c
 80028fc:	0800295c 	.word	0x0800295c
 8002900:	08002960 	.word	0x08002960

08002904 <_init>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr

08002910 <_fini>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr
